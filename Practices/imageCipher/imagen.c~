/* Referencia:
   https://poesiabinaria.net/2011/06/leyendo-archivos-de-imagen-en-formato-bmp-en-c/
*/

#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include "imagen.h"

unsigned char *abrirBMP(char *filename, bmpInfoHeader *bInfoHeader)
{

  	FILE *f;
  	bmpFileHeader header;     /* cabecera */
  	unsigned char *imgdata;   /* datos de imagen */
 	uint16_t type;        /* 2 bytes identificativos */

  	f = fopen (filename, "r");
	if( f  == NULL )
	{
		perror("Error al abrir el archivo en lectura");
		exit(EXIT_FAILURE);
	}

  	/* Leemos los dos primeros bytes */
  	fread( &type, sizeof(uint16_t), 1, f );
  	printf("%.4X\n",type );
    if( type != 0x4D42 )        /* Comprobamos el formato */
    	{
		printf("Error en el formato de imagen, debe ser BMP de 24 bits\n");
      		fclose(f);
          printf("After the IF, \n");
      		return NULL;
    	}

  	/* Leemos la cabecera de fichero completa */
  	fread( &header, sizeof(bmpFileHeader), 1, f );

  	/* Leemos la cabecera de información completa */
  	fread( bInfoHeader, sizeof(bmpInfoHeader), 1, f );

  	/* Reservamos memoria para la imagen, ¿cuánta?
     	Tanto como indique imgsize */
  	imgdata = (unsigned char *)malloc( bInfoHeader->imgsize );
	if( imgdata == NULL )
	{
		perror("Error al asignar memoria");
		exit(EXIT_FAILURE);
	}
  	/* Nos situamos en el sitio donde empiezan los datos de imagen,
   	nos lo indica el offset de la cabecera de fichero*/
  	fseek(f, header.offset, SEEK_SET);

  	/* Leemos los datos de imagen, tantos bytes como imgsize */
  	fread(imgdata, bInfoHeader->imgsize,1, f);

  	/* Cerramos el apuntador del archivo de la imagen*/
  	fclose(f);

  	/* Devolvemos la imagen */
  	return imgdata;
}

void guardarBMP( char *filename, bmpInfoHeader *info, unsigned char *imgdata )
{
	 bmpFileHeader header;
  	FILE *f;
  	uint16_t type;

  	f = fopen(filename, "w+");
	if( f  == NULL )
	{
		perror("Error al abrir el archivo en escritura");
		exit(EXIT_FAILURE);
	}

  	header.size = info->imgsize + sizeof(bmpFileHeader) + sizeof(bmpInfoHeader);
  	/* header.resv1=0; */
  	/* header.resv2=1; */
  	/* El offset será el tamaño de las dos cabeceras + 2 (información de fichero)*/
  	header.offset = sizeof(bmpFileHeader) + sizeof(bmpInfoHeader) + 2;
  	/* Escribimos la identificación del archivo */
  	type = 0x4D42;
  	fwrite( &type, sizeof(type), 1, f );
  	/* Escribimos la cabecera de fichero */
  	fwrite(&header, sizeof(bmpFileHeader),1,f);
  	/* Escribimos la información básica de la imagen */
  	fwrite(info, sizeof(bmpInfoHeader),1,f);
  	/* Escribimos la imagen */
  	fwrite(imgdata, info->imgsize, 1, f);
  	fclose(f);
}
void encrypt(char *filename,bmpInfoHeader *info, unsigned char *img){
  int j = 0;
  for(j = 0; j < info->imgsize;j++){
    //img[j] = img[j] ^ 0xFF;
    printf("%.2x ",img[j]);
  }
  printf("%d\n",j);
   bmpFileHeader header;
    FILE *f;
    uint16_t type;

    f = fopen(filename, "w+");
  if( f  == NULL )
  {
    perror("Error al abrir el archivo en escritura");
    exit(EXIT_FAILURE);
  }

    header.size = info->imgsize + sizeof(bmpFileHeader) + sizeof(bmpInfoHeader);
    /* header.resv1=0; */
    /* header.resv2=1; */
    /* El offset será el tamaño de las dos cabeceras + 2 (información de fichero)*/
    header.offset = sizeof(bmpFileHeader) + sizeof(bmpInfoHeader) + 2;
    /* Escribimos la identificación del archivo */
    type = 0x4D42;
    fwrite( &type, sizeof(type), 1, f );
    /* Escribimos la cabecera de fichero */
    fwrite(&header, sizeof(bmpFileHeader),1,f);
    /* Escribimos la información básica de la imagen */
    fwrite(info, sizeof(bmpInfoHeader),1,f);
    /* Escribimos la imagen */
    /*Despues de abrir la imagen debemos guardarla modificando los diferentes bits*/
    int x, y;
    /* Reducimos la resolución vertical y horizontal para que la imagen entre en pantalla */
    static const int reduccionX=6, reduccionY=4;
    /* Si la componente supera el umbral, el color se marcará como 1. */
    static const int umbral=90;
    /* Asignamos caracteres a los colores en pantalla */
    static unsigned char colores[9]=" bgfrRGB";
    int r,g,b,i = 0;
    char *buffer;
    long filelen;
    filelen = ftell(f);  
    buffer = (char *)malloc((filelen+1)*sizeof(char));
    printf("%ld\n",sizeof(buffer));
    /* Dibujamos la imagen */
    for (y=info->height; y>0; y-=reduccionY,i++){
        for (x=0; x<info->width; x+=reduccionX,i++){
          b=(img[3*(x+y*info->width)]>umbral);
          g=(img[3*(x+y*info->width)+1]>umbral);
          r=(img[3*(x+y*info->width)+2]>umbral);
          //printf("check before buff %d\n",i);
          //buffer[i] = img[3*(x+y*info->width)];
          i++;
          //buffer[i] = img[3*(x+y*info->width)+1];
          i++;
          //buffer[i] = img[3*(x+y*info->width)+2];
          //printf("check last buff %d\n",i);
          //fwrite(img[3*(x+y*info->width)], 1, 1, f);
          //fwrite(img[3*(x+y*info->width)+1], 1, 1, f);
          //fwrite(img[3*(x+y*info->width)+2], 1, 1, f);
          printf("%c", colores[b+g*2+r*4]);
        }
      printf("\n");
        //printf("before size %d\n",i);
    }
    printf("before size\n");
    printf("sizeofbuffer = %ld,%ld\n",strlen(buffer),sizeof(buffer) );
    fwrite(buffer, sizeof(buffer), 1, f);
    fclose(f);
}
void displayInfo( bmpInfoHeader *info )
{
  	printf("Tamaño de la cabecera: %u\n", info->headersize);
  	printf("Anchura: %d\n", info->width);
  	printf("Altura: %d\n", info->height);
  	printf("Planos (1): %d\n", info->planes);
  	printf("Bits por pixel: %d\n", info->bpp);
  	printf("Compresión: %d\n", info->compress);
  	printf("Tamaño de datos de imagen: %u\n", info->imgsize);
  	printf("Resolucón horizontal: %u\n", info->bpmx);
  	printf("Resolucón vertical: %u\n", info->bpmy);
  	printf("Colores en paleta: %d\n", info->colors);
  	printf("Colores importantes: %d\n", info->imxtcolors);
}
void saveCipher(bmpInfoHeader *info, unsigned char *img)
{
  int x, y;
  /* Reducimos la resolución vertical y horizontal para que la imagen entre en pantalla */
  static const int reduccionX=6, reduccionY=4;
  /* Si la componente supera el umbral, el color se marcará como 1. */
  static const int umbral=90;
  /* Asignamos caracteres a los colores en pantalla */
  static unsigned char colores[9]=" bgfrRGB";
  int r,g,b;

  /* Dibujamos la imagen */
  for (y=info->height; y>0; y-=reduccionY)
    {
      for (x=0; x<info->width; x+=reduccionX)
    {
      b=(img[3*(x+y*info->width)]>umbral);
      g=(img[3*(x+y*info->width)+1]>umbral);
      r=(img[3*(x+y*info->width)+2]>umbral);

      printf("%c", colores[b+g*2+r*4]);
    }
      printf("\n");
    }
}
void TextDisplay(bmpInfoHeader *info, unsigned char *img)
{
  int x, y;
  /* Reducimos la resolución vertical y horizontal para que la imagen entre en pantalla */
  static const int reduccionX=1, reduccionY=1;
  /* Si la componente supera el umbral, el color se marcará como 1. */
  static const int umbral=90;
  /* Asignamos caracteres a los colores en pantalla */
  static unsigned char colores[9]=" bgfrRGB";
  int r,g,b;

  /* Dibujamos la imagen */
  for (y=info->height; y>0; y-=reduccionY)
    {
      for (x=0; x<info->width; x+=reduccionX)
    {
      b=(img[3*(x+y*info->width)]>umbral);
      g=(img[3*(x+y*info->width)+1]>umbral);
      r=(img[3*(x+y*info->width)+2]>umbral);

      printf("%c", colores[b+g*2+r*4]);
    }
      printf("\n");
    }
}
char *readBytes(char *filename){
  //This funtion open a File and reads all the of their bytes
  FILE *fileptr;
  char *buffer;
  long  filelen;

  fileptr = fopen(filename, "rb");  // Open the file in binary mode
  fseek(fileptr, 0, SEEK_END);          // Jump to the end of the file
  filelen = ftell(fileptr);             // Get the current byte offset in the file
  rewind(fileptr);                      // Jump back to the beginning of the file

  buffer = (char *)malloc((filelen+1)*sizeof(char)); // Enough memory for file + \0
  fread(buffer, filelen, 1, fileptr); // Read in the entire file
  fclose(fileptr); // Close the file
  return buffer;
}
char *readBytesBMP(char *filename){
  //This funtion open a File and reads all the of their bytes
  FILE *fileptr;
  char *buffer;
  long  filelen;

  fileptr = fopen(filename, "rb");  // Open the file in binary mode
  fseek(fileptr, 0, 52);          // Jump to the end of the file
  filelen = ftell(fileptr);             // Get the current byte offset in the file
  rewind(fileptr);                      // Jump back to the beginning of the file

  buffer = (char *)malloc((filelen+1)*sizeof(char)); // Enough memory for file + \0
  fread(buffer, filelen, 1, fileptr); // Read in the entire file
  fclose(fileptr); // Close the file
  return buffer;
}

